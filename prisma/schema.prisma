// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @unique
  firstName String
  lastName  String
  email     String  @unique
  stories   Story[]
  saves     Save[]

  @@map("user")
}

model Story {
  id             String          @id @default(uuid())
  title          String
  borough        String
  content        String          @db.Text
  summary        String          @db.Text
  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
  categories     StoryCategory[]
  media          Media[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Recommendation Recommendation?
  Radar Radar?
  saves          Save[]

  @@map("story")
}

model Category {
  id          String          @id @default(uuid())
  name        String          @unique
  description String
  stories     StoryCategory[]

  @@map("category")
}

model StoryCategory {
  storyId    String
  categoryId String
  story      Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([storyId, categoryId])
  @@map("storycategory")
}

model Media {
  id          Int     @id @default(autoincrement())
  cid         String
  story       Story   @relation(fields: [storyId], references: [id])
  storyId     String
  isThumbnail Boolean

  @@map("media")
}

model Recommendation {
  storyId String @id @unique
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model Radar {
  storyId String @id @unique
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@map("radar")
}

model Save {
  id        String  @id @default(uuid())
  userId    String
  storyId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  story    Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@map("save")
}

model Subscribers {
  id        String  @id @default(uuid())
  email     String  @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriber")
}